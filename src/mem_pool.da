from logger_util import LOGGER
import random
import string
sys_random = random.SystemRandom()


class MemPool:

    def __init__(self, validator_id):
        self.pending_txns = dict()
        self.validator_id = validator_id

    def add_transaction(self, txn):
        LOGGER.log('MemPool: add_transaction', txn)
        # Don't add client requests if already present
        if (txn['req_id'] not in self.pending_txns):
            self.pending_txns[txn['req_id']] = txn

    # Get the length of pending transactions
    def peek_pool(self):
        LOGGER.log('MemPool: peek_pool', None)
        length = len(self.pending_txns.keys())
        LOGGER.log('MemPool: peek_pool: returns',
                   length, self.pending_txns.keys())
        return length

    '''Function get transactions()'''

    def get_transactions(self):
        # LOGGER.log('MemPool: get_transactions', None)
        # # send_txns = list(self.pending_txns.values())
        # # self.pending_txns.clear()
        # if len(self.pending_txns) == 0:
        #     LOGGER.log('MemPool: get_transactions: returns', [])
        #     return []
        # # Get a single transaction
        # keys = list(self.pending_txns.keys())
        # send_txns = [self.pending_txns[keys[0]]]
        # del self.pending_txns[keys[0]]
        # LOGGER.log('MemPool: get_transactions: returns', send_txns)
        # return send_txns
        letters = string.ascii_uppercase
        # print(letters)
        txn = ''.join(sys_random.choice(letters) for i in range(5))
        # print(str(self.validator_id)+txn)
        return txn

    def validate_and_remove_transactions(self, txns):
        LOGGER.log('MemPool: validate_and_remove_transactions', txns)
        to_remove = []
        for txn in txns:
            if txn['req_id'] in self.pending_txns:
                to_remove.append(txn['req_id'])
            else:
                LOGGER.log(
                    'MemPool: validate_and_remove_transactions: returns', False)
                return False

        for req_id in to_remove:
            del self.pending_txns[req_id]
        LOGGER.log('MemPool: validate_and_remove_transactions: returns', True)
        return True
