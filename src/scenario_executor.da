# type:ignore
from config import configs, config_tests
from ScenarioGenerator import ScenarioGenerator
import sys
import json
from logger_util import LOGGER
from validator import Validator
from cryptography import Cryptography
from network_playground import NetworkPlayground
import os
import shutil
from pprint import pprint


# SCENARIOS_FILE = "../scenarioconfig/config1.json"
SCENARIOS_PATH = "../scenarios/generated_scenarios/"
# SCENARIOS_PATH = "../scenarios/testcases/"

# SCENARIOS_PATH = ""


class ScenarioExecutor(process):

    def setup(config, config_id, scenario, scenario_id):
        # pprint(config)
        LOGGER.scenario_executor = self
        LOGGER.process_id = "scenario_executor"
        LOGGER.filename = '../logs/config' + str(config_id) + '/' \
            + '/scenario'+str(scenario_id)+'/' \
            + LOGGER.process_id + ".log"

        LOGGER.log_action("Initial scenario configuration", scenario)
        self.scenario = scenario
        self.scenario_id = scenario_id
        self.config = config
        self.config_id = config_id
        self.doneFlag = False

    def run():

        nValidators = self.scenario['number_of_nodes']
        nTwins = self.scenario['number_of_twins']
        leaders = self.scenario['leaders']

        validator_private_keys = {}
        validator_public_keys = {}
        node_number_to_pid_mapping = {}
        pid_to_node_number_mapping = {}
        twin_to_node = {}
        node_to_twin = {}

        validators = new(Validator, num=nValidators)

        networkPlayground = new(NetworkPlayground, num=1)
        LOGGER.np = networkPlayground

        # Generate Validator keys
        for personal_id, validator in enumerate(validators):
            private_key, public_key = Cryptography.generate_key()
            validator_private_keys[personal_id] = private_key
            validator_public_keys[personal_id] = public_key
            node_number_to_pid_mapping[personal_id] = validator
            pid_to_node_number_mapping[validator] = personal_id

        ''' Setup validators '''
        for personal_id, validator in enumerate(validators):
            setup(validator, (self.config, self.config_id, self.scenario, self.scenario_id, personal_id, list(validators), validator_private_keys[personal_id], validator_public_keys,
                              leaders, networkPlayground, personal_id, self, self.config['quorum_size']))

        ''' Setup twins'''
        twins = new(Validator, num=nTwins)
        for personal_id, twin in enumerate(twins):
            setup(twin, (self.config, self.config_id, self.scenario, self.scenario_id, personal_id, list(validators), validator_private_keys[personal_id], validator_public_keys,
                         leaders, networkPlayground, personal_id+nValidators, self, self.config['quorum_size']))
            twin_to_node[personal_id+nValidators] = personal_id
            node_to_twin[personal_id] = personal_id+nValidators
            node_number_to_pid_mapping[personal_id+nValidators] = twin
            pid_to_node_number_mapping[twin] = personal_id+nValidators

        '''Setup Network Playground'''
        setup(networkPlayground, (self, nValidators, nTwins, self.scenario,
                                  node_number_to_pid_mapping, pid_to_node_number_mapping, node_to_twin, twin_to_node, self.config_id, self.scenario_id, self.config['liveness']))

        ''' Start Network Playground, Twins, Validators '''
        start(networkPlayground | twins | validators)
        LOGGER.log_action(
            'STARTED validators, twins and network playground', None)

        # Scenario Executor waits on Stop Processes.
        # Network Playground informs scenario executor when to stop runing the validators+twins
        await(received(('Stop Processes',)))

        LOGGER.log_event(
            'RECEIVED', 'STOP PROCESSES', {}, networkPlayground)

        ''' Ask validators + twins to stop '''
        send(('Stop Running',), to=validators | twins)
        LOGGER.log_np_event('Sent', 'Stop Running', self, validators | twins)

        await(self.doneFlag)

    def receive(msg=("forward commit config", commit_config), from_=np):
        LOGGER.log_event('RECEIVED', ' Commit Config',
                         commit_config, np)
        LOGGER.log_event('SENT', 'Ask main to end', None, parent())

        # Call Safety test on commit config
        if safety_test(commit_config):
            output("Safety Upheld")
            LOGGER.log_action(
                " ******************** Safety Upheld ******************** ", None)
        else:
            output("Safety Violated")
            LOGGER.log_action(
                " ******************** Safety Violated ******************** ", None)

        send(('Ask main to end',), to=parent())

        '''Exit scenario executor'''
        exit()

    def safety_test(commit_config):
        number_of_ledgers = len(commit_config)
        max_rounds = -1
        for ledger in commit_config:
            max_rounds = max(max_rounds, len(commit_config[ledger]))
        for r in range(max_rounds):
            curr = None
            for ledger in commit_config:
                if curr and r < len(commit_config[ledger]):
                    if curr != str(commit_config[ledger][r]):
                        return False
                if not curr and r < len(commit_config[ledger]):
                    curr = str(commit_config[ledger][r])

        return True


def is_config_valid(config):
    if int(config['nvalidators']) < (3 * int(config['nfaulty']) + 1):
        LOGGER.log_action(
            "Invalid config, Number of validators should be more than thrice of number of faulty validators.", config)
        print(
            "Number of validators should be more than thrice of number of faulty validators.")
        return False
    if (int(config['nfaulty']) > int(config['exclude_size'])) or (int(config['exclude_size']) > 2 * int(config['nfaulty'])):
        LOGGER.log_action(
            "Exlude size should be between nfaulty and 2*nfaulty", config)
        print(
            "Exlude size should be between nfaulty and 2*nfaulty")
        return False
    return True


def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    config_number = 1
    if len(sys.argv) > 1:
        config_number = int(sys.argv[1])
    os.makedirs('../logs/config' + str(config_number))
    os.makedirs('../ledgers/config' + str(config_number))
    # print(config)

    SCENARIOS_FILE = SCENARIOS_PATH+"config"+str(config_number)+".json"
    # SCENARIOS_FILE = "scenarios8.json"
    # testcases file path
    # SCENARIOS_FILE = SCENARIOS_PATH+"quorum_size_2f_config2.json"

    scenario_file = open(SCENARIOS_FILE)
    scenario_id = 0
    json_content = json.load(scenario_file)
    for each_scenario in json_content:
        config = configs[config_number]
        config["nvalidators"] = each_scenario["number_of_nodes"]
        config["nfaulty"] = each_scenario["number_of_twins"]
        if not is_config_valid(config):
            output("The provided config", config,
                   "is not valid. Skipping this config.")
            continue
        os.makedirs('../logs/config' + str(config_number) +
                    '/scenario'+str(scenario_id))
        os.makedirs('../ledgers/config' + str(config_number) +
                    '/scenario'+str(scenario_id))
        scenario_executor = new(ScenarioExecutor, num=1)
        setup(scenario_executor, (config, config_number, each_scenario, scenario_id))
        start(scenario_executor)

        # await(each(se in scenario_executor, has=received(('Ask main to end',), from_=se)))

        await(received(('Ask main to end',), from_=scenario_executor))

        scenario_id += 1
    exit()
