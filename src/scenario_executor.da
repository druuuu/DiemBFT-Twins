# type: ignore

class ScenarioExecutor(process):
    # def setup()

    def run():
        # TODO: For every scenario in generated file:
        # TODO: execute_scenario(scenario)

    def execute_scenario(scenario):

        nValidators = scenario['number_of_nodes']
        nTwins = scenario['number_of_twins']
        current_scenario = scenario['scenario']
        # scenario variable initialization
        leaders = scenario['leaders']

        validator_private_keys = {}
        validator_public_keys = {}
        scenario_number_mapping = {}
        twin_to_node = {}
        node_to_twin = {}

        validators = new(ValidatorFI, num=nValidators)
        twins = None
        # Create network playground object
        # TODO: network_playground = new(NetworkPlayground, num = 1)

        # Generate Validator keys
        for personal_id, validator in enumerate(validators):
            private_key, public_key = Cryptography.generate_key()
            validator_private_keys[personal_id] = private_key
            validator_public_keys[personal_id] = public_key
            scenario_number_mapping[personal_id] = validator

        # Setup the non-faulty validators
        for personal_id, validator in enumerate(validators):
            setup(validator, (personal_id, validator_public_keys,
                              validator_private_keys[personal_id], leaders))

        # Define create_twins funtion
        def create_twins():
            twins = new(ValidatorFI, num=nTwins)
            for personal_id, twin in enumerate(twins):
                setup(twin, (personal_id, validator_public_keys,
                             validator_private_keys[personal_id], leaders))
                twin_to_node[personal_id+nValidators] = personal_id
                node_to_twin[personal_id] = personal_id+nValidators
                scenario_number_mapping[personal_id+nValidators] = twin

        # Create the twins
        create_twins()

        # Setup network_playground
        # TODO: setup(network_playground, (nValidators, nTwins, current_scenario,scenario_number_mapping,node_to_twin, twin_to_node))

        # Start all processes
        # TODO: start(network_playground)
        start(validators)
        start(twins)

        # TODO: await all process have been ended
        # TODO: send 'Done' to network_playground
        # TODO: stop the network_playground

        # Receive handler : Network Playground asks to quit process 'p'
        def receive(msg=('Quit Process', p), from_=network_playground):
            # TODO: Retrieve process and stop it (depends if p is personal_id or process_id)

            # TODO: Receive handler : Commit config
            # TODO: Safety check function


def main():

    if os.path.exists('../logs/') and os.path.isdir('../logs/'):
        shutil.rmtree('../logs/')

    if os.path.exists('../ledgers/') and os.path.isdir('../ledgers/'):
        shutil.rmtree('../ledgers/')

    # TODO: Generate scenarios

    scenario_executor = new(ScenarioExecutor)
    setup(scenario_executor)
    start(scenario_executor)
