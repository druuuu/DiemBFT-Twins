import datetime

from utils import todict


class LOGGER:

    process_id = ""
    replicas = []
    clients = []
    filename = ""
    np = None
    scenario_executor = None

    def log_event(event, msg_type, msg, proc=None):
        # print(LOGGER.np)
        # print(LOGGER.replicas)
        if proc is None:
            pass
        # elif proc == LOGGER.networkPlayground:
        #     other_proc = "Network Playground"
        elif type(proc) == set or type(proc) == list:
            other_proc = "ALL validators"
        elif proc in LOGGER.replicas:
            other_proc = "validator_" + str(LOGGER.replicas.index(proc))
        # elif proc in LOGGER.clients:
            # other_proc = "client_" + str(LOGGER.clients.index(proc))
        elif proc == LOGGER.np:
            other_proc = "network_playground"
        elif proc == LOGGER.scenario_executor:
            other_proc = "scenario_executor"
        else:
            other_proc = "parent_process"

        if msg != None and hasattr(msg, '__dict__'):
            msg = todict(msg)
        to_from = "To:"
        if event.lower() == 'sent':
            to_from = "To:"
        elif event.lower() == 'received':
            to_from = "From:"

        f = open(LOGGER.filename, 'a+')
        print(
            "Timestamp:", datetime.datetime.now(), "|",
            "ProcessId:", LOGGER.process_id, "|",
            "Event:", event, "|",
            "MsgType:", msg_type, "|",
            to_from, other_proc, "|",
            "Msg:", msg,
            file=f
        )
        f.close()


    def log_np_event(event, msg_type, source_node, destination_nodes, round=None, msg=None, *params):
        
        if msg != None and hasattr(msg, '__dict__'):
            msg = todict(msg)

        f = open(LOGGER.filename, 'a+')
        p_list = []
        for p in params:
            if p != None and hasattr(p, '__dict__'):
                p = todict(p)
            p_list.append(p)

        log_parts = []
        log_parts.extend(["Timestamp:", datetime.datetime.now(), "|"])
        log_parts.extend(["Event:", event, "|"])
        log_parts.extend(["MsgType:", msg_type, "|"])
        log_parts.extend(["From:", source_node, "|"])

        if destination_nodes is not None:
            log_parts.extend(["To:", str(destination_nodes), "|"])
        if round is not None:
            log_parts.extend(["In Round:", round, "|"])
        if msg is not None:
            log_parts.extend(["Msg:", msg, "|"])
        for param in params:
            # log_parts.append(p_list)
            log_parts.extend([param, "|"])

        print(
            *log_parts,
            file=f
        )
        f.close()

    def log_action(action, obj):
        if obj != None and hasattr(obj, '__dict__'):
            obj = todict(obj)

        f = open(LOGGER.filename, 'a+')
        print(
            "Timestamp:", datetime.datetime.now(), "|",
            "ProcessId:", LOGGER.process_id, "|",
            "Action:", action, "|",
            "Object:", obj, "|",
            file=f
        )
        f.close()

    def log(funcname, *params): pass
    #     p_list = []
    #     for p in params:
    #         if p != None and hasattr(p, '__dict__'):
    #             p = todict(p)
    #         p_list.append(p)

    #     f = open(LOGGER.filename, 'a+')
    #     print(
    #         "Timestamp:", datetime.datetime.now(), "|",
    #         "ProcessId:", LOGGER.process_id, "|",
    #         "Objects:", str(p_list), "|",
    #         file=f
    #     )
    #     f.close()

    # timestamp = datetime.datetime.now()
    # f = open(LOGGER.filename, 'a+')
    # p_list = []
    # for p in params:
    #     if p != None and hasattr(p, '__dict__'):
    #         p = p.__dict__
    #     p_list.append(p)

    # print(timestamp, LOGGER.process_id,
    #       funcname, p_list, file=f)
    # f.close()
